Lab 2 notes: 


Summary: 


Plan: 

install mariaDB and mySQL  and phpmyadmin 

Make a database format so that the website can store the JSON objects in the database √


Make a version of the website that requires you to click a button to start, only once you click, then it fetches 
   and puts JSON obj in database
   Only use PHP fetch obj out of database and display it to front end 
   make a js call, call a php script to fetch API data and store it, now that I think about it that may have been easier 

Then use PHP to display the same exact version of the website as last lab from the database
They have a dropdown menu of other available (pre-inserted locations) that the user can select, 
   index.php:96 is where you can insert
   selecting a new location will overwrite the existing database entry 



Before submit checklist: 


Questions: 
how to run mysql package so I can connect to DB from js? 



Outline: 


 Regarding "putting that JSON object into a MySQL database," 
 I checked with Dr. Callahan, and he mentioned that it is up 
 to you and your fellow students to decide how you want to store 
 your data and in what format within the database

 You all installed PHPMyAdmin on your VMs during the Intro class. It was not pre-installed on the VMs—I confirmed this with him as well.

Debug: 
   sqli is not even throwing an error 
   Error handling in php and js was set up correct, issue was I was using a table name, not a database name


Things I learned: 

. is concatenation
//$_Server, returns the name of the path of the file path currrently executing 
Without Phpmyadin, mySQl is interacted with most commonly through the command line 
Only can insert into DB if valid JSON
int(10) -> 10 is the display width, not the storage size 
Don't forget to include API ID when inserting 
Node.js is a tool that basically allows js to connect to databases
Need Node.js for use of mysql package
Must have type='module' in script in order to import 
   and then must have mysql2 installed in project directory which you can only use with node.js installed 
   will see in directory that node_modules is installed 
php://input allows you to acses raw POST data -> the JSON
Send Javascript object to php, very cool 
CANNOT use console with scripts inserted as type='module'   
JSON.stringify converts JavaScript Objects into strings 
if you misstype something in the initial mysqli statement it will not throw an error that you can read 
can error handle in php by using echo  
   If JS called it, it will just return it to the JS file it called it from  
   $dbok is a way of checking if the database connection is good without stopping the rest of the HTML from working, not really neccesarry in a script where the main function is to connect to a database; no ins and outs
When make table of JSON objects, content type will say longtext, but it's JSON  


Future improvements: 
Use XAMPP instead of pushing to main 

   in the future, should have my js file running serverside with node js 
Couldn't figure out how to succesfully import mysql package and would be less time to just make it with php so did it like that instead
   Can learn how to do this in future


Any challenges I came across: 

Citations:
Send Javascript object to php: 
   https://www.youtube.com/watch?v=Ctz1Fsgt9OE

Didn't actually use: 
   JSON into mySQL    :
      https://dev.mysql.com/doc/refman/8.4/en/json.html

   JS database connection: 
      https://www.w3schools.com/nodejs/nodejs_mysql.asp
      Also taught me how to install node.js and npm (the package manager )

   Getting the mySQL Package in JS file:
      https://www.sitepoint.com/using-node-mysql-javascript-client/

   stringify: https://www.w3schools.com/jsref/jsref_stringify.asp#:~:text=The%20JSON.,has%20to%20be%20a%20string.

Decided to not use anything above 


Current:
   Getting Javascript to toss to php using fetch


Helpful Code Chunks: 

            //Catches echo response for testing, returns as a string so must be converted to JSON 
            .then(function(response){
               return(response.json()) 
            })
            .then(function(js){
               console.log(js); 
            }); 
